package ValidatePurchaseRules

#import 
import com.sapienter.jbilling.server.item.PricingField;
import com.sapienter.jbilling.server.item.db.ItemDTO;
import com.sapienter.jbilling.server.item.tasks.Subscription;
import com.sapienter.jbilling.server.order.db.OrderLineDTO;
import com.sapienter.jbilling.server.user.ValidatePurchaseWS;
import com.sapienter.jbilling.server.user.db.UserDTO;
import java.math.BigDecimal;

#globals
global com.sapienter.jbilling.server.user.tasks.RulesValidatePurchaseTask$ValidatePurchase validatePurchase;

rule "Max 3 lemonades"
    when
        // lemonade, item id 1
        ItemDTO( internalNumber == "DP-1" )

        // subscribed to plan with hard limit
        Subscription( itemId == 2 )
        $result : ValidatePurchaseWS( authorized == true, $quantityAvailable : quantityAsDecimal )

        // current number of lemonades, no more than 3 allowed
        $quantityAlready : Double ( eval( doubleValue + $quantityAvailable.doubleValue() > 3 ) )
                from accumulate( Subscription( itemId == 1, $quantity : quantity )
                                 init ( BigDecimal total = new BigDecimal("0"); ),
                                 action( total = total.add($quantity); ),
                                 reverse( total = total.subtract($quantity); ),
                                 result( total.doubleValue() ) )
    then
        $result.setQuantity(3 - $quantityAlready);
        validatePurchase.addMessage("No more than 3 lemonades are allowed.");
        update($result);
end

rule "Authorization check"
    when
        $result : ValidatePurchaseWS( authorized == true, quantityAsDecimal.doubleValue <= 0.0 )
    then
        $result.setAuthorized(false);
        $result.setQuantity(BigDecimal.ZERO);
end

rule "Max 200 coffees for current order"
    when
        // coffee, item id 3
        ItemDTO( internalNumber == "DP-3" )
        $result : ValidatePurchaseWS(authorized == true, $quantityAvailable : quantityAsDecimal )

        // current number of coffees, no more than 20 allowed
        $quantityAlready : Double ( eval( doubleValue + $quantityAvailable.doubleValue() > 20 ) ) 
                from accumulate( OrderLineDTO( itemId == 3, $quantity : quantity )
                                 init ( BigDecimal total = new BigDecimal("0"); ),
                                 action( total = total.add($quantity); ),
                                 reverse( total = total.subtract($quantity); ),
                                 result( total.doubleValue() ) )
    then
        $result.setQuantity(20 - $quantityAlready);
        validatePurchase.addMessage("No more than 20 coffees are allowed.");
        update($result);
end

rule "Throw exception"
    when
        PricingField(name == "fail")
    then
        throw new RuntimeException("Throw exception rule");
end
